==========
Fri May 16 11:03:06 PDT 2014

Life Cycle Inventory Fragments

 = Flow-property-aware
 = linear; reducible
 = fully parametric

# Filesystem Layout:

The database exists as a formal data model stored within the project.  It
is implemented from the spec using Entity Framework and then populated from
data found in the file system of the server.  In this way the database can
be constructed from scratch.

The source data files are stored in a data directory on the server.  There
are [will be] three common subdirectories and a number of project-specific
data directories storing ILCD-formatted XML data.  

The data directories include:

 $DATA_ROOT/append/ - CSV-formatted files with records to append to
 		      tables automatically-generated from ILCD data.

 $DATA_ROOT/fragments/ - Files that make reference to ILCD data to
 		       	 construct fragments that encode the model. Also
 		       	 UUID-referenced. 

 $DATA_ROOT/scenarios/ - Files that make reference to fragments and ILCD
 		         data to describe different modeling scenarios.

 $DATA_ROOT/<source name>/ - Source data stored as ILCD archives.

ILCD-formatted data archives have the following structure: an ILCD
subfolder containing seven subfolders, one for each established ILCD data
type.  Only 'UnitGroup', 'FlowProperty', 'Flow', 'Process', and
'LCIAMethod' are used in the current tool.  The directory names are
(unfortunately) the lower-cased pluralizations of the data types, e.g.:

 $DATA_ROOT/<source name>/ILCD/processes/

Data within these data type folders takes the form of <UUID>.xml, where
<UUID> is the standard 8-4-4-4-12 lower-case UUID format.

The ILCD folder also contains an optional XML file containing
classification category information; for the time being this data is
handled outside of the tool and imported via the append directory.

Records in files in the non-ILCD folders will all be in CSV format.  All
will make reference to ILCD data by UUID, so upon import UUID-referenced
fields will need to be translated into internal IDs.

Data updates will be accomplished by introducing new data to these three
directories and then re-indexing them.  Alternatively, a new data source
can be introduced and indexed.


# Database Schema:

Key:

 * Field Name as exists in current implementation
 X Field Name to be removed from current implementation
 + Field Name to be added to current implementation
 % Field Name to be renamed from current implementation

Tables can be specified as 'New Table' or 'REMOVE TABLE'

The following tables are required:

## User Info

   Consult with CalRecycle on implementing users and user  privileges.

   User
    * UserID
    * Name
    * CanLogin (bool)
    * CanEditScenarios 
    * CanEditFragments
    * CanEditBackground (incl. base scenarios)
    * CanAppend
    * etc (I guess we can discuss later, what the etc might include - Rachel)

    Those are given in increasing order of privilege.

    User 1 is "DB Creator" w no privileges

## Type Enumerations
   
   manually generated and stored in the Data Model.

   DataType (enumeration)
    * DataTypeID 
    * Name [ Flow | FlowProperty | Process  | UnitGroup | Source 
      	    | LCIAMethod | Contact | Fragment ]

    Data types described in the ILCD documentation, used mainly for
    handling classification information.  'Fragment' represents the
    extension described for the current tool.

   Direction (enumeration)
    * DirectionID [ 1 | 2 ]
    * Name [Input | Output]

   FlowType (enumeration)
    * FlowTypeID [ 1 | 2 ]
    % Name [ IntermediateFlow | Elementary Flow ]

    All product, waste, and accounting flows are Intermediate flows.  All
    interchanges with the natural world are Elementary flows.

   ImpactCategory (enumeration)
    * ImpactCategoryID
    * Name 

    Impact Categories represented in ILCD LCIA Methods.

   IndicatorType (enumeration)
    * IndicatorTypeID
    * Name

    Indicator types represented in ILCD LCIA methods.

   NodeType (enumeration)
    * NodeTypeID [1 | 2 | 3 | 4 | 5]
    * Name: [Process | Fragment | InputOutput | Background | Cutoff]

    A Node's NodeType specifies how the node resolves its reference flow:
    to a database process, to a subfragment, to an external input/output,
    or to a background process.  Background processes can be further
    specified as 'cutoff' flows, not modeled at all.

   ParamType (enumeration)
    * ParamTypeID: [1 | 2 | 3 
      	     | 4 
	     | 
	     | 6 | 7 
	     | 8 | 9
	     | 10 ]

    * Name: [Dependency | Conservation | Distribution
      	     | FlowProperty 
	     | 
	     | ProcessDissipation | NodeDissipation
	     | ProcessEmission | NodeEmission
	     | LCIAFactor ]

    Different parameter types must be handled at different points in the
    tree traversal / LCIA computation.  Note: Type 5 is not used.

   Visibility (enumeration)
    * VisibilityID : [ 1 | 2 ]
    * Name: [ Public | Private ]


## Documentation

   Doc
    * DocID
    * Comment
    * URI

    Generic documentation table, for holding comments and links to external
    resources containing more information.  For tables containing a UUID
    field, the records should be documented in the appropriate ILCD XML
    file.  Any table not containing a UUID field gets an optional  DocID
    foreign key.

    The URI could refer to a CalRecycle-maintained Content Management
    System, for instance, that would enable users to edit content based on
    their authorization.  Comments should be editable (selectively) via the
    API and front-end.

    If that were the case, then there would need to be some way to ensure
    that DocIDs are persistent-- complicating their use during external
    data loading.

## Standard ILCD-based Tables

   generated from auto-load of ILCD archives

   DataProvider
    * DataProviderID
    * Name
    * DirName
    * DocID

    A list of ILCD archives accessed by the tool.  One DataProvider is
    created for each source directory in the data folder (excepting the
    'fragments' directory and the 'scenarios' directory). Each archive is
    assumed to represent a different inventory data provider.

    DataProviderID 1 should correspond to the 'append' directory- which can
    be used to load additional ILCD data sets.

    Do we want the non-ILCD folders to be included? 

    (DataProviderID 2 should correspond to the 'fragments' directory.
     DataProviderID 3 should correspond to the 'scenarios' directory.)

    Generated prior to ILCD import.

   ILCDEntity
    * ILCDEntityID
    * UUID
    * Version - ILCD version of source data file
    * DataProviderID
    * DataTypeID
    
    Lookup table mapping UUIDs to sources in the file system.  Generated
    during ILCD import.
	Unique Index on (UUID, Version)

   UnitGroup
    * UnitGroupID
    * ILCDEntityID (FK, was UnitGroupUUID)
    * Name
    * ReferenceUnitConversionID(FK to UnitConversionID)

   UnitConversion
    * UnitConversionID
    * UnitGroupID
    * Unit
    * LongName
    * Conversion

    Gives a list of conversion factors relative to the ReferenceUnit- 
    Conversion for ReferenceUnit assumed to be 1 / ignored.

   FlowProperty
    * FlowPropertyID
    * ILCDEntityID (FK, was FlowPropertyUUID) - UUID of source data file
    * Name
    * UnitGroupID

   Flow
    * FlowID
    * ILCDEntityID (FK, was FlowUUID) - UUID of source data file
    * Name
    * CASNumber
    * FlowTypeID
    * ReferenceFlowProperty(FK to FlowPropertyID)

   FlowFlowProperty
    * FlowFlowPropertyID
    * FlowID
    * FlowPropertyID
    * MeanValue
    * StDev

    * DocID

    * TypMin
    * TypMax

   FlowPropertyEmission
    * FlowPropertyEmissionID
    * FlowPropertyID (FK to FlowProperty)
    * FlowID (FK to Flow.FlowID; FlowType must be Elementary)
    * Scale (float)

    * DocID

    How various flow properties map to environmental emissions.

   LCIAMethod
    * LCIAMethodID
    * ILCDEntityID (FK, was LCIAMethodUUID)
    * Name
    * Methodology
    * ImpactCategoryID
    * ImpactIndicator
    * ReferenceYear
    * Duration
    * ImpactLocation
    * IndicatorTypeID
    * Normalization
    * Weighting
    * UseAdvice
    * ReferenceQuantity (was FlowPropertyID) (FK to FlowPropertyID)

   LCIA
    * LCIAID
    * LCIAMethodID
    * FlowUUID - not a FK, UUID stored by import tool so that Flow can be created after LCIAMethod is imported.
    * FlowName - as listed in LCIAMethod data set
    * FlowID - FK. (set to Flow.FlowID where LCIA.FlowUUID = ILCDEntity.UUID and ILCDEntity.ILCDEntityID = Flow.ILCDEntityID)
    * DirectionID
    * Geography
    * Factor

    * DocID

    Table of all LCIA factors listed in all LCIAMethod datasets.  
    FlowID field Updated after import and whenever Flow or LCIA tables change. 

   Process
    * ProcessID - internal primary key
    * UUID (was ProcessUUID) - UUID of source file
    * Name
    * Year
    * Geography
    % ReferenceType (could be enumeration) - YES - Moved into lookup table and added foreign key
    % ProcessType (could be enumeration) - YES - Moved into lookup table and added foreign key
    * ReferenceFlowID

   ProcessFlow
    * ProcessFlowID
    * ProcessID
    * Geography
    * FlowID
    * DirectionID
    * Type
    * VarName
    * Magnitude
    * Result
    * StDev
      
    * DocID

    * TypMin
    * TypMax

   ProcessDissipation
    * ProcessDissipationID
    * ProcessFlowID
    * EmissionFactor (0-1)

    * DocID

    Please see description in fragment-design.txt

    Note-- when this table is exported from Matlab to CSV, the exported
    file will contain separate UUIDs for Process and Flow.  The CSV
    importer must find the ProcessFlowID that matches the identified
    Process AND Flow.

   CompositionModel
    * CompositionModelID
    * FlowID (FK)
    * Name

    * DocID

    List of intermediate flows for which composition parameters are
    relevant (multiple entries allowed for each FlowID).  

   CompositionData
    * CompositionDataID
    * CompositionModelID (FK)
    % FlowPropertyID (FK)
    * Value

    * DocID

    List of flow property values that are relevant to a given composition
    model.  These are stored as sets and can be easily invoked by a user
    (or designer) to generate and populate a corresponding set of
    ParamInstances in a scenario.

   ProcessComposition
    * ProcessCompositionID 
    * ProcessID (FK)
    X InFlowID      Not needed, same as FlowID in referenced CompositionModel
    * CompositionModelID    (FK)

    Future Cross Validation:  for each ProcessComposition, pc, pc.CompositionModel.Flow is a flow of pc.Process 

### Indices, constraints

    * Every table needs a primary key
	
## Classification Tables

   should ultimately be generated automatically; for now generated manually
   in Matlab

   CategorySystem
    * CategorySystemID
    * Name
    * DataTypeID 
    * Delimiter

    Each CategorySystem may have only one CategorySystemID per DataTypeID. 

   Category
    * CategoryID
    * ExternalClassID
    * Name
    * CategorySystemID
    * ParentCategoryID
    * HierarchyLevel

    * DocID

    Record of all the various classifications that can be assigned to data
    entities.  The CategorySystem and Class tables are generated by loading
    XML files based on the ILCD-Categories schema (two are provided in the
    data directory: ILCDClassification-local.xml and
    ILCDFlowCategorization-local.xml; and each ILCD archive can contain its
    own categorization info in the ILCD folder.

   Classification - THIS TABLE WILL BE RE-GENERATED EXTERNALLY
    * ClassificationID
    * ILCDEntityID (FK to ILCDEntity.ILCDEntityID)
    * CategoryID

    Mapping of UUIDs to Class information.  A single data entity (UUID) can
    have multiple ClassIDs, even within the same Category System.  A data
    entity will have one ClassID for each hierarchical level in its
    categorization.  These should be scraped from the XML files on import;
    but for now I can do this in Matlab.

## Append data

   New records are appended to Standard tables by loading data files in the
   'append' subdirectory (this is necessary because some FlowFlowProperty
   records need to be manually generated, and the ProcessDissipation
   extension also needs to be manually generated).
 
    - file stored in the 'append' subdirectory named <TableName>.csv
    - same fields as <TableName>, except internal IDs replaced with UUIDs.
    - After append completes, rename file to <TableName>-appended.csv 

## Fragment Definition Tables

   generated from auto-load of fragment data files in the 'fragments'
   subdirectory.  These tables refer to one another and so can only be
   imported in bulk, as a group.

   

   Fragment
    * FragmentID
    * ILCDEntityID
    * Name
    * ReferenceFragmentFlowID (FK to FragmentFlowID) (was RootNode) 
   
    * DocID

   Background 
    * BackgroundID
    * FlowID
    * DirectionID (w.r.t. the foreground; i.e. Electricity is an Input)
    * NodeTypeID (only Process, Fragment or Cutoff allowed)
    X TargetID (NOT foreign key- interpret as ProcessID or FragmentID)
    * ILCDEntityID (FK to ILCDEntity) ILCDEntityID of target Process or Fragment, null when NodeType is Cutoff


    * DocID

    Maps flows to background processes / fragments.  Can be overridden in
    scenarios (in ScenarioBackground table)

   FragmentStage
    * FragmentStageID
    * FragmentID
    * StageName

    * DocID

    Fragment nodes can be assigned to stages for contribution analysis.  By
    default, every node acts as a distinct stage; however, if stages are
    defined then nodes are grouped by stage for contribution analysis.  A
    given FragmentStageID's scope is limited to a single fragment.

   FragmentFlow
    * FragmentFlowID (equals FragmentEdgeID) (was FragmentNodeID)
    * FragmentID (FK to Fragment)
   ---edge fields (moved from FragmentEdge) :
    * ParentFragmentFlowID (FK to FragmentFlowID) (was Origin) (moved to first)
    * FlowID (FK to Flow; FlowType must be Intermediate)
    * DirectionID (FK to Direction, w.r.t. origin node)
    X Quantity (or NULL if Origin NodeType is Fragment)
   ---node fields:
    * Name - of process occurring at terminus (or flow name for IO/background)
    * FragmentStageID (was StageID) (FK to FragmentStage: FragmentID must match)
    X ReferenceFlowPropertyID (FK to FlowPropertyID) - of node inflow
    * NodeTypeID (FK to NodeType)

    * DocID

    A FragmentFlowID corresponds to the observation of a flow and its
    terminus.

    The FragmentFlowID identified as Fragment.ReferenceFragmentFlowID is
    the reference flow for its fragment-- this record has null
    ParentFragmentFlowID and FlowID fields.

   FragmentNodeProcess
    * FragmentNodeProcessID
    * FragmentFlowID
    * ProcessID (FK to Process.ProcessID)
    + FlowID (FK)

    * DocID

    Mapping of nodes with type "Process" to ProcessIDs

   FragmentNodeFragment
    * FragmentNodeFragmentID
    * FragmentFlowID
    * SubfragmentID
    + FlowID (FK)

    * DocID

    Mapping of nodes with type "Fragment" to FragmentIDs

## Scenarios and Parameters

   Report scenarios generated from auto-load of scenario data files in the
   'scenarios' subdirectory; user scenarios subsequently generated by users
   customizing their own scenarios.

   ScenarioGroup
    * ScenarioGroupID (was ScenarioSetID)
    * OwnedBy (FK to UserID)
    * Name
    * Visibility - public or private, or some other specification.

    A scenario group is a set of scenarios owned by a single user that are
    all subject to the same access control.  Users may see scenarios in
    ScenarioGroupID 1 and their own ScenarioGroupID (and possibly others)

   Scenario
    * ScenarioID
    * ScenarioGroupID(FK to ScenarioGroup)
    * Name
    + TopLevelFragmentID (FK to Fragment) - shown in initial view
    + ActivityLevel (float) - scaling of initial view

    * DocID

   ScenarioBackground - ### PLEASE REVIEW
   [could be named BackgroundSubstitution]
    * ScenarioBackgroundID
    * ScenarioID
    * FlowID
    * DirectionID
    * NodeTypeID (only Process or Fragment allowed)
    X TargetID (NOT a foreign key- interpret as ProcessID or FragmentID)
    + ILCDEntityID (FK to ILCDEntity) ILCDEntityID of target Process or Fragment, null when NodeType is Cutoff

    * DocID

    Contains scenario-specific overrides for Background mappings.
   
   Param
    * ParamID
    * ParamTypeID
    + ScenarioID (moved from ScenarioParam)
    * Name

    * DocID

    these fields are derived from TypMin and TypMax fields in data tables--
    not yet implemented
    * Min -- determined at invocation (in frontend) except for types 4, 6, 
      	     7, where it is always 0.
    * Typ -- default value of the parameter in scenario- always 0 except
      	     for types 4, 6, 7, where it is set to the baseline 
	     EmissionFactor or FlowFlowProperty value.
    * Max -- determined at invocation (in frontend) except for types 4, 6,
      	     7, where it is always 1.

   ScenarioParam - DELETE TABLE
    * ScenarioParamID
    * ScenarioID
    * ParamID

   DependencyParam
    * DependencyParamID
    * ParamID (FK to Param, ParamTypeID must be 1, 2, or 3)
    * FragmentFlowID (was FragmentEdgeID) (FK to FragmentFlowID)
    * Value (float) unit value of param (phi=0) (aka scenario setting)

   DistributionParam
    X DistributionParamID - not needed
    * DependencyParamID (FK to DependencyParamID, PK for this table)
    * ConservationDependencyParamID (FK to DependencyParamID)

      note: both DependencyParamID and ConservationDependencyParamID must
      have the same ParamID [with ParamTypeID=2]

   FlowPropertyParam
    * FlowPropertyParamID
    * ParamID (FK to Param, ParamTypeID must be 4)
    * FlowFlowPropertyID (FK)
    * Value (float) unit value of param (phi=0) (aka scenario setting)

   CompositionParam -- DELETE TABLE
    * CompositionParamID
    * ParamID (FK to Param, ParamTypeID must be 5)
    * FlowFlowPropertyID (FK)
    * Value (float) unit value of param (phi=0) (aka scenario setting)

    Note: types 4 and 5 both link to FlowFlowPropertyIDs; so type 5 is
    removed. 

   ProcessDissipationParam
    * ProcessDissipationParamID
    * ParamID (FK to Param, ParamTypeID must be 6)
    * ProcessDissipationID (FK)
    * Value (float) unit value of param (phi=0) (aka scenario setting)

   NodeDissipationParam - DEPRECATED
    * NodeDissipationParamID
    * ParamID (FK to Param, ParamTypeID must be 7)
    * ProcessDissipationID (FK to ProcessDissipation)
    * FragmentFlowID (FK to FragmentFlow)
    * Value (float) unit value of param (phi=0) (aka scenario setting)

   ProcessEmissionParam
    * ProcessEmissionParamID
    * ParamID (FK to Param, ParamTypeID must be 8)
    * ProcessFlowID (FK)
    * Value (float) unit value of param (phi=0) (aka scenario setting)

   NodeEmissionParam - DEPRECATED
    * NodeEmissionParamID
    * ParamID (FK to Param, ParamTypeID must be 9)
    * ProcessFlowID (FK to ProcessFlow)
    * FragmentFlowID (FK to FragmentFlow)
    * Value (float) unit value of param (phi=0) (aka scenario setting)

   CharacterizationParam
    * CharacterizationParamID
    * ParamID  (FK to Param, ParamTypeID must be 10)
    * LCIAID (FK)
    * Value (float) unit value of param (phi=0) (aka scenario setting)

    A single param can be linked to multiple instances in the model- but
    they will all be of the same type.

    The lookup table used depends on the param type.

    Distribution + conservation params are complicated because adjusting a
    distribution param requires an equal and opposite adjustment to the
    corresponding conservation param (this is handled in the front-end) 

   ProcessSubstitution 
    X ProcessSubstitutionID - Not Needed - primary key is composite (FragmentNodeProcessID, ScenarioID)
    * ScenarioID (FK to Scenario)
    * FragmentNodeProcessID (FK)
    * ProcessID (FK)

    * DocID

    It is a scenario design constraint that the substituted ProcessID must
    have the same list of product flows as the original ProcessID.

   FragmentSubstitution 
    X FragmentSubstitutionID   - Not Needed - primary key is composite (FragmentNodeFragmentID, ScenarioID)
    * ScenarioID (FK to Scenario)
    * FragmentNodeFragmentID (FK)
    * SubFragmentID (FK)

    * DocID

    It is a scenario design constraint that the substituted FragmentID must
    have the same list of product flows as the original FragmentID.

    CompositionSubstitution - NEW TABLE
    * ScenarioID (PK, FK)
    * ProcessCompositionID (PK, FK)
    * CompositionModelID (FK)

    * DocID

## Cached Computation Results

  Generated upon load or upon modification of a scenario.  When a scenario
  is modified (new parameter added, parameter removed, default
  parameterization changed), all affected cached entries should be deleted
  and recomputed, including records in NodeCache matching the ScenarioID,
  and all their descendents in ScoreCache.  

  The same applies when any Background record with a non-null ScenarioID is
  updated.  If any scenario-generic background record is changed, I am
  afraid the entire cache table must be wiped and recomputed, because of
  the difficulty of determining which node scores depend on a given
  background process.

  Recomputation for a given scenario can be triggered by traversing the
  fragment with FragmentID 1, which always corresponds to the top-level
  fragment, with the ScenarioID specified as argument.  That will activate
  recursion to all subfragments touched by the scenario-- necessitating the
  recomputation of all relevant entries in the cache tables.  

  Cache tables can be compared across implementations (i.e. Matlab, SQL) to
  validate the computations.

   NodeCache (Renamed from FragmentScore)
    * NodeCacheID (was FragmentScoreID)
    * FragmentFlowID (was FragmentID) (FK to FragmentFlowID)
    * ScenarioID (FK)
    * NodeWeight - relative to the Root node of the parent fragment
    + FlowMagnitude - in FragmentFlow.FlowID reference units
      (computed during traversal) 

    Size of NodeCache table = # of nodes x # of scenarios 

   ScoreCache - New Table
    * ScoreCacheID
    X NodeCacheID (was FragmentScoreID) (FK)
    + FragmentFlowID (FK)
    + ScenarioID (FK)
    * LCIAMethodID (FK)
    * ImpactScore - for a unit activity (computed during LCIA)

    size of ScoreCache table = #(nodes) x #(scenarios) x #(LCIA  methods)

   BackgroundCache 
    * BackgroundCacheID
    * BackgroundID (FK)
    + ScenarioID (FK)
    * LCIAMethodID (FK)
    * Score

    Stores summed background computations for LCIA computation.

   ScenarioBackgroundCache - DELETE TABLE

  Sensitivities should be computed on the fly.  If performance is slow, we
  can add a boolean table indicating whether a given FragmentFlowID +
  ScenarioID is sensitive to a given ParamID, thus simplifying the
  traversal process.
