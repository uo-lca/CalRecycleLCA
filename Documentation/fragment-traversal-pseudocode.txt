==========
Mon Jul 28 00:32:01 -0700 2014

New version is simpler:

bool success = FragmentTraverse ( fragment_id, scenario_id )
{
  // ref_flow is a FragmentFlowID value
  ref_flow = SELECT FragmentFlowID FROM FragmentFlow
             WHERE FragmentID = @fragment_id 
               AND ParentFragmentFlowID IS NULL

  activity = 1;

  // check to see if node has been traversed
  chk = SELECT * FROM NodeCache
        WHERE FragmentFlowID = ref_flow
	  AND ScenarioID = scenario_id;

  if isempty(chk)
    success = NodeRecurse( ref_flow, scenario_id, activity );
}

## ------------------------------------------------------------------------

success = NodeRecurse( fragment_flow_id, scenario_id, flow_magnitude )
{
  the_flow = SELECT * FROM FragmentFlow 
             WHERE FragmentFlowID = fragment_flow_id

  // node_flows: FlowID, DirectionID, Result
  node_flows = GetScenarioProductFlows( the_flow, scenario_id );

  term_flow_id = GetTermFlow( the_flow );

  // determine flow mapping
  inflow = SELECT * FROM node_flows 
           WHERE FlowID = term_flow_id 
	   AND DirectionID = comp( the_flow.DirectionID );
  // comp is complement (swap 1/Input and 2/Output)

  if the_flow.FlowID == NULL || the_flow.FlowID == term_flow_id
     node_conv = 1;
  else
  { // convert the inflow to the reference property of the term flow
    term_fp = SELECT ReferenceFlowPropertyID FROM Flow 
    	      WHERE FlowID = TermFlowID
    
    node_conv = SELECT ( fpp.Value == NULL 
    	      	         ? ff.MeanValue : fpparam.Value) AS Result
    	        FROM FlowFlowProperty ff
    	      	LEFT OUTER JOIN 
		(
		  SELECT fpp.Value AS Value
		  FROM FlowPropertyParam fpp 
		  INNER JOIN ScenarioParam sp ON fpp.ParamID = sp.ParamID
		  WHERE ScenarioID = scenario_id
		) 
		fpparam
		ON FlowFlowPropertyID
                WHERE ff.FlowID = the_flow.FlowID
                  AND ff.FlowPropertyID = term_fp

  }

  node_scale = 1 / inflow.Result;
  node_weight = flow_magnitude * node_conv * node_scale;

  SetNodeCache( fragment_flow_id, scenario_id, flow_magnitude, node_weight );
  
  // now map outgoing fragment edges to other product flows
  // NO NEED to EXCLUDE inflows because it will not show up in the join
  outflows = SELECT ff.FragmentFlowID, ff.FlowID, ff.DirectionID,
                    ( dpparam.Value == NULL 
		      ? nf.Result : dpparam.Value ) AS Result
             FROM FragmentFlow ff 
             LEFT OUTER JOIN node_flows nf ON ff.FlowID = nf.FlowID
             LEFT OUTER JOIN
	     (
	       SELECT dp.FragmentFlowID AS FragmentFlowID,
	       	      dp.Value AS Value 
	       FROM DependencyParam dp
	       INNER JOIN ScenarioParam sp ON dp.ParamID = sp.ParamID
	       WHERE sp.ScenarioID = scenario_id
	     )
	     dpparam
	     ON ff.FragmentFlowID = dpparam.FragmentFlowID
             WHERE ParentFragmentFlowID = fragment_flow_id
               AND ff.DirectionID = nf.DirectionID

  if isempty (outflows)
    success = true;
  else
  { // recursion
    for i in outflows
    {
      if i.Result is null
      {
        catch exception!
      }
      success = node_recurse( i.FragmentFlowID, scenario_id, 
      	      		      node_weight * i.Result );
    }
  }
}

## ------------------------------------------------------------------------

node_flows = GetScenarioProductFlows ( the_fragment_flow, scenario_id)
{
  // input is a single FragmentFlow record
  //
  // output is a struct with fields:
  // FlowID
  // DirectionID
  // Result (from ProcessFlow)

  switch the_fragment_flow.NodeTypeID
  {
    case {3,4} // InputOutput, Background
    {
      node_flows.FlowID = the_fragment_flow.FlowID;
      node_flows.DirectionID = comp ( the_fragment_flow.DirectionID );
      node_flows.Result = 1;
    }
    case 1 // Process
    {
      process_id = SELECT ( ps.ProcessID == NULL
      			    ? fnp.ProcessID : ps.ProcessID ) as ProcessID
      		   FROM the_fragment_flow 
      		   INNER JOIN FragmentNodeProcess fnp
      		   LEFT OUTER JOIN  ProcessSubstitution ps
		     WHERE ps.ScenarioID = scenario_id
     
      node_flows = SELECT pf.FlowID,
                          pf.DirectionID,
                          pf.Result
                   FROM ProcessFlow pf 
                   INNER JOIN Flow f ON pf.FlowID = f.FlowID
                   WHERE pf.ProcessID = process_id AND f.FlowTypeID = 1
    }
    case 2 // Fragment
    {
      subfragment_id = SELECT ( fs.SubFragmentID == NULL 
      		   	        ? fnf.SubFragmentID 
				: fs.SubFragmentID ) as SubFragmentID
      		    FROM the_fragment_flow 
      		    INNER JOIN FragmentNodeFragment fnf
      		    LEFT OUTER JOIN  FragmentSubstitution fs
		    WHERE fs.ScenarioID = scenario_id

      // recursive traversal
      FragmentTraverse( subfragment_id, scenario_id);

      // pull cache values 
      // in SQL it's a bit complicated:
      // first we make a table of flows with cache values:
      node_flows = SELECT ff.FlowID AS FlowID,
                          ff.DirectionID AS DirectionID,
                          nc.FlowMagnitude AS FlowMagnitude,
                          fnf.FlowID AS RefFlowID
                   FROM FragmentFlow ff
                   INNER JOIN NodeCache nc ON ff.FragmentFlowID = nc.FragmentFlowID 
                   LEFT OUTER JOIN FragmentNodeFragment fnf ON ff.FragmentFlowID = fnf.FragmentFlowID
                   WHERE ff.FragmentID = FID 
                     AND ( ff.NodeTypeID = 3 OR ff.FlowID IS NULL )
                     AND nc.ScenarioID = scenario_id
      
      // next we need to modify the table to fix the reference flow (FlowID = null) and
      // make it appear like an InputOutput flow
    
      update node_flows.FlowID = node_flows.RefFlowID 
             AND node_flows.DirectionID = comp(node_flows.DirectionID) 
             WHERE node_flows.FlowID IS NULL
     
      // Finally we need to group flows by distinct FlowID + DirectionID
    
      node_flows = select FlowID, DirectionID,
                           sum(FlowMagnitude) AS Result
                           FROM node_flows
                           GROUP BY FlowID, DirectionID
     
      // and that's it.
    }
  }
}      

## ------------------------------------------------------------------------

term_flow_id = GetTermFlow( the_fragment_flow )
switch the_fragment_flow.NodeTypeID
{
  case {3,4}
    term_flow_id = the_fragment_flow.FlowID;
  case 1
    term_flow_id = the_fragment_flow -> FragmentNodeProcess.FlowID;
  case 2
    term_flow_id = the_fragment_flow -> FragmentNodeFragment.FlowID;
}


     

###########################################################################
###########################################################################
END Mon 07-28 01:11:05 -0700














--------------
### Fragment Traversal with Parameters
## updated Mon 06-16 11:22:24 -0700

Traverse(ScenarioID)
{
  // The top-level entry for fragment traversal.
  // first things first: don't re-compute if there is cached data

  if ~isempty( SELECT * FROM NodeCache WHERE FragmentID = @FragmentID AND
  ScenarioID = @ScenarioID AND NodeWeight ~=0 ) 
    return // do not re-compute 

  myflows = this.flows; // (I have no idea what language I'm writing)
    
  // Add on FlowFlowPropertyID
  fpflows = lookupFlowProperty ( myflows )

  fpflows = applyParam ( fpflows, ScenarioID, DependencyParam,
  	    	         FragmentFlowID, Quantity );
  
  fpflows = applyParam ( fpflows, ScenarioID, FlowPropertyParam,
  	    	       	 FlowFlowPropertyID, meanValue );

  float activity = 1;
  
  Ref_Flow = this.ReferenceFragmentFlowID; //

  // traverse the tree recursively, writing cache values as you go
  node_recurse(fpflows, ScenarioID, Ref_Flow, activity);
  // DONE.
}


fp_flows=lookupFlowProperty(flows)
{
  // This function returns an augmented flows table that includes
  // a field containing the FlowFlowProperty record that
  // matches both FlowID and FlowPropertyID in each flows record. Adds
  // FlowFlowPropertyID and meanValue fields.

  // first, determine the correct FlowFlowPropertyID
  fp_flows = SELECT flows.*,
  	     ffp.FlowFlowPropertyID,
  	     ffp.meanValue
	     FROM flows INNER JOIN FlowFlowProperty ffp
  	     ON flows.FlowID = ffp.FlowID
	     WHERE flows.FlowPropertyID = ffp.FlowPropertyID

  return fp_flows;
}

/* ***************************************************************
e=applyDependencyParam(flows,ScenarioID)
{
  // This function returns modified flows table that contains
  // scenario-specific parameterization for dependency relationships

  ParamList params = ScenarioParam.* WHERE ScenarioID = @ScenarioID
  dep_params = INNER JOIN params->Param->DependencyParam // types 1, 2, 3
  
  // generate scenario-specific edge table.  The idea is that we use the
  // edge weights specified in the default FragmentEdge table, unless they
  // have been overridden by scenario params
  e = SELECT flows.*,
      dep_params.Value AS ParamValue,
      FROM flows 
      LEFT OUTER JOIN dep_params ON FragmentFlowID
        
  // take the param values as defaults:
  UPDATE e.Quantity with e.ParamValue where e.ParamValue is not null;

  DROP field ParamValue; // so e has the same fields as flows

  return e;
}
****************************************************************** */

e=applyParam(flows,ScenarioID,ParamTable,LookupField,ReplaceField)
{ 
  // This function returns modified flows table that contains
  // scenario-specific parameterization for all relationships
  //
  // generic param override: on input table flows, find params belonging 
  // to the named ParamTable; join on LookupField; replace ReplaceField
  // with ParamTable.Value
  //
  // ParamTable is one of:
  //  - DependencyParam
  //  - FlowPropertyParam
  //  - CompositionParam
  //  - ProcessDissipationParam
  //  - NodeDissipationParam
  //  - ProcessEmissionParam
  //  - NodeEmissionParam
  //  - CharacterizationParam

  ParamList params = ScenarioParam.* WHERE ScenarioID = @ScenarioID
  my_params = INNER JOIN params->Param->@ParamTable

  // then attach the param values (if there are any) to flows
  e = SELECT flows.*,
      	     fp_params.Value AS ParamValue,
      	     FROM flows 
      	     LEFT OUTER JOIN fp_params 
	     ON flows.@LookupField = fp_params.@LookupField

  // take the param values as defaults:
  UPDATE e.@ReplaceField with e.ParamValue 
  	 where e.ParamValue is not null;

  DROP field ParamValue; 

  return e;
}

e=applyNodeParam(flows,ScenarioID,FragmentFlowID,ParamTable,LookupField,ReplaceField) 
{ 
  // this is just like applyParam, but has scope limited to a single node

  ParamList params = ScenarioParam.* WHERE ScenarioID = @ScenarioID
  my_params = INNER JOIN params->Param->@ParamTable
  	      WHERE @ParamTable.FragmentFlowID = @FragmentFlowID

  // then attach the param values (if there are any) to flows
  e = SELECT flows.*,
      	     fp_params.Value AS ParamValue,
      	     FROM flows 
      	     LEFT OUTER JOIN fp_params 
	     ON flows.@LookupField = fp_params.@LookupField

  // take the param values as defaults:
  UPDATE e.@ReplaceField with e.ParamValue 
  	 where e.ParamValue is not null;

  DROP field ParamValue; 

  return e;
}




Fragment.node_recurse(flows, ScenarioID, current_flow, activity)
{
  the_flow = SELECT * FROM flows WHERE FragmentFlowID = current_flow

  // "enter" the node -- handle reference property conversion
  // (params of type 4 have effect here)
  node_weight = the_flow.Quantity;
  node_conv = the_flow.MeanValue;

  activity = activity * node_weight * node_conv; % node activity level unit conversion

  SetNodeCache( current_flow, ScenarioID, activity )
  
  // now descend into node's children
  switch the_flow.NodeType
    case 'Process'
    {
      // dependencies are encoded in the edge table
      dependencies = SELECT * FROM flows WHERE ParentFragmentFlowID = current_flow
      for i in dependencies
      { 
        node_recurse(flows, ScenarioID, i.FragmentFlowID, activity )
      }
    }
    case 'Fragment'
    { 
      // dependencies are inputs and outputs from subfragment
      the_node = SELECT * FROM the_flow INNER JOIN FragmentNodeFragment fnf
      	       	 ON the_flow.FragmentNodeID = fnf.FragmentNodeID
      
      // flows in current fragment that depend on this node
      dependencies = SELECT * FROM flows
      		     WHERE flows.ParentFragmentFlowID = current_flow;

      F = new Fragment(the_node.SubFragmentID);

      // traverse the subfragment
      F.Traverse(ScenarioID);

      // need to set current fragment quantities based on subfragment 
      // inputs and outputs
      dependencies = F.map_dependencies(dependencies, ScenarioID ); // updates dependencies.Quantity

      // there's an outer join in here somewhere
      UPDATE flows.Quantity with dependencies.Quantity 
         WHERE flows.FragmentFlowID = dependencies.FragmentFlowID

      for i in dependencies
      { 
        node_recurse(flows, ScenarioID, i.FragmentFlowID, activity )
      }

    }
    case Background
      // nothing to do -- background fragments have already been traversed

    case InputOutput
      // nothing to do -- cache value specifies input/output quantity

  end // switch NodeType
}

Fragment.map_dependencies( dep, ScenarioID )
{
  // match local input-output flows to remote dependencies
  // flows = this fragment (the subfragment)
  // dependencies = parent fragment

  my_IO = SELECT FlowID, 
  	         DirectionID, 
		 sum( NodeWeight ) AS IOsum
	  FROM flows INNER JOIN NodeCache 
	    ON flows.FragmentFlowID = NodeCache.FragmentFlowID
	  WHERE flows.NodeType = 'InputOutput'
	    AND NodeCache.ScenarioID = @ScenarioID
	  GROUP BY FlowID, DirectionID;

  // some error checking here-- dep records should match my_IO records
  // exactly on FlowID and Direction / CompDir
 
  dep = SELECT dep.*,
  	       my_IO.IOsum
	FROM dep
	INNER JOIN my_IO ON dep.FlowID = my_IO.FlowID
	WHERE dep.DirectionID = my_IO.DirectionID


  UPDATE dep.Quantity WITH dep.IOsum;

  return dep;
}
