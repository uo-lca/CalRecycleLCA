==========
Mon Sep 15 23:08:04 PDT 2014

Application state: stored in client

User has access to a set of scenario groups, that are determined
based on authentication-

The server should tell the API who is making the request, and the DB should
just have a mapping of UserIDs to Scenario Groups-- each user gets its own,
plus more can be shared.  so only for sharing do we need a table. UserID
and ScenarioGroupID can be synonymous.

so: a user has access to a set of scenarios and can create new ones.  To
create a new scenario: select an existing scenario to duplicate, or start
from scratch.

components of a scenario:

 * a list of Params: Type, Name, type-specific mapping, value, metadata

   - dependency params: (type 1, 2, 3) apply to FragmentFlows
   - flow property params: (type 4) apply to FlowFlowProperty entries
   - [composition params: type 5; currently unsupported]
   - emission factor params: (type 8) apply to ProcessFlow entries
   - dissipation factor params: (type 6)" ", via composition model
   - characterization params: (type 10) apply to LCIA entries

 * a list of substitutions:

   - process / fragment substitutions
   - background substitutions
   - composition substitutions

All params and substitutions are applied during the computation routines
and cached by scenario.

Users interact with the database by:

 (1) navigating the model graphically using the sankey diagrams
 (2) inspecting resources via query views
 (3) designing scenarios by creating and adjusting params, either 
     - during interactive traversal or 
     - via menu-driven access


============
Initial View
============

Upon connecting to the service, the user should see a menu of options,
including:

 * Scenario Viewer (--> sankey view)
 * Process Inspector (--> process LCIA view)
 * [imtermediate] Flow Inspector (--> table views; composition models)
 * Background Resolution
 * LCIA Method Inspector

The Frontend should remember session information about the user, such as:

  - what scenarios are available
  - ScenarioID selection list
  - LCIAMethodID selection list
  - currently active scenario (edits apply to active scenario)
  - local list of params to be added / changed / removed from scenario 

  - any cached db information, e.g. flow list + process list

---------------
Scenario Viewer
---------------

list of scenarios available to the user:

 - name, group ID- visibility - can edit?
 - reference flow and activity level of top-level fragment
 - view in sankey viewer
 - view/edit as parameter list
 (- compute LCI)

 - waterfalls? or access those via sankey view

 - compare scenarios by LCIA score?


-----------------
Process Inspector
-----------------

 - all processes pulldown list
   * filters: processes with emissions / ?

 - tabular (or sankey?) list of intermediate flows
 - lcia pulldown list
 - segmented barchart showing unit LCIA score and breakdown

 -? if ProcessComposition, ... show composition profile?
   * table of CompositionData->FlowPropertyEmission->ProcessDissipation

 -? if scenario, show params:
   * type [5,]6- labeled in ProcessComposition table
   * type 8- labeled in segmented barchart view / list

   * type 10- labeled in segmented barchart view if applicable

 -? support param PUT + POST if user has permissions on scenario

--------------
Flow Inspector
--------------

 - select elementary / intermediate

 - if elementary.. that's a doozy of a list
   * maybe allow user to select by classification

 - if intermediate, a pulldown should suffice

 - shows:
   * flow metadata
   * classification
   * if elementary: show all LCIA factors
   * if intermediate: show all flowproperties

 - if flow appears in CompositionModel, show available composition models

 - if scenario: GET/PUT/POST type 4 (flowproperty) and type 10 (lcia)
   params; select alternate composition model

   - where does one input alternate composition models? here, presumably

---------------------
LCIA Method Inspector
---------------------

gah

