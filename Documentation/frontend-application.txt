Monday June 1 2015
Specification for new features under revised SOW

Three enhancements associated with the new approved scope of work.  These
are listed easiest-first.

 * Flow Composition Modeling and adjustment via the frontend

   We need one or two new views:

   = First, we need a table of composition models (this could be a new
     navigation bar entry or simply a new table on the home screen)

     This will just have: Composition Model Name, Flow Name

     (In order to do this, I need to create API routes to report
     composition models)

   = Then we need a "Composition model detail" view which is just like the
     LCIA method detail view.  It will have the name of the composition
     model, a list of processes that refer to it, and a list of composition
     data which is a param grid (and a scenario selector just like the LCIA
     detail view).

     Grid columns: Flow Property, Value, Param

     (I will also need a composition data API route)

     Param submission will be CompositionDataID and Value

   = Finally, on Process LCIA view (both modes), if the ProcessResource has
     a CompositionModelID field, create a link to the composition model
     detail view that corresponds.

   I think that's about it for this one.


 * Process LCIA Comparison

   It should be possible to compare two (or more) process LCIA results to
   one another on the Process LCIA view.  This is tricky because in general
   the processes will have different elementary flows, and the elementary
   flows will appear in a different order.

   I spelled out some pseudocode that should implement the desired
   functionality.  This will also tie in with (and help resolve) #77

   = pull-down list selects process

   = once process is selected, a new pull-down list appears to select a
     comparison process.  This could be repeated...

   = For all processes selected: obtain detailed LCIA results from the API 

   = for each LCIA method:

     * determine axis_scale and axis_span:
       compute sums of all positive and all negative contributions for each
       process. 
       axis_scale = (minimum(negative), maximum(positive))
       axis_span = axis_scale(2) - axis_scale (1)

     * generate a flow list

       flow_list=[]
       combine all lcia details into a single array that selects flowID,
       abs(LCIAResult) as AbsResult, sort largest to smallest, save -> A
       while A[0].AbsResult > threshold * axis_span:
         if (A[0].flowID not in flow_list)
	   flow_list=[flow_list A[0].flowID]
         remove A[0] from A

       flow_list now contains a sorted list of flows accounting for
       (1-threshold) of the score (note, some other thresholding approach
       could be used)

       Add "Aggregate positive" to end of flow_list
       Add "Aggregate negative"
       
     * Construct a summary table of LCIA scores (getFlowRows) from the
       flow_list: 
       summary_table columns: Color, Flow Category, Name, p1, p2...
       (one data column for each process)
       table should have rows equal to the length of flow_list (including Aggregate)

       for each process: 
         compute its total LCIA score from positive values -> Aggregate positive; 
         compute its total LCIA score from negative values -> Aggregate negative; 

       for each flowID in flow_list:
       	 assign it a sequential color (generic grays / ? for aggregate rows)
         lookup its compartment and name
	 for each process:
	   lookup LCIA result for current flowID
	   if present:
	     add value to the table
	     if value >0 subtract value from Aggregate positive
	     if value <0 subtract value from Aggregate negative
	   else:
	     add null value in table
        
     * Use populated summary table to (1) draw barchart and (2) draw d3 table

       = barchart should accept as input (axis_scale, summary_table).  All
       barcharts should use the same axis_scale.

       = table output should suppress aggregate rows if they are all empty
       (as is currently done)



 * Sensitivity Analysis.  On "Fragment LCIA", only in fragment navigation mode,
   provide UI for sensitivity to parameters belonging to the current scenario.  

   Summary of Current operation:

   - Stages present in a waterfall are given by
     /api/fragments/{fid}/stages

   - By default, scenario LCIA results come from query
     /api/scenarios/{sid}/fragments/{fid}/lciaresults
     which is an array of LCIAResultResource objects R[...]

     Each stage value can be found in R[lciaMethodID][scenarioID][stageID]
     as coded  (?)

   - unit sensitivity results come from querying
     /api/fragments/{fid}/params/{pid}/sensitivity
     returns an LCIAResultResource S[...] with the same fragmentstages as already
     shown 

   - unit sensitivity value is found in
     S[lciaMethodID][scenarioID][stageID].CumulativeResult
     call it "unit_sens"

     S[lciaMethodID][scenarioID].Total is "total_sens"

   - param sensitivity value is:
     sens_value = unit_sens*(param_default - param_value) 
     (note: this is -1 times what I previously said- this is correct)

   - similarly:
     total_sens_value = total_sens*(param_default - param_value)

   Implementation should look something like the following:

   = create a whisker directive that accepts arguments (bar, sens_value)
      and draws a whisker starting at the end of the named bar and having
      length sens_value in axis units

   = View Parameter Sensitivity: Drop-down box with a list of parameter
     names belonging to the current scenario

   = When user selects a parameter, query
     /api/fragments/{fid}/params/{pid}/sensitivity 
     compute (param_default - param_value) for later use

   = For each LCIA method, decorate the (non-base-case) waterfall chart as
     follows:

     -- for each stage with a non-zero unit sensitivity, draw a whisker of
        length sens_value starting from the end of the bar.

     -- At or near the horizontal axis, draw a whisker of length
        total_sens_value starting from the waterfall net total 

   = "wishlist" feature: after user selects param, create a slider UI to
      adjust param_slider.  Slider should mark param_default and
      param_value, and param_slider should initially equal param_value.

      modify whisker directive to accept three inputs (bar, sens_value,
      slider_value) where sens_value is computed as before, 
      slider_value = unit_sens*(param_default - param_slider)

      If this could be d3-ified so that the whisker values automatically
      update when the slider is moved, that would be awesome.







======================================================================================================================
Thur Apr 15 2015
Future work ideas (not in scope of current SOW)

Sensitivity Analysis
    In Fragment LCIA click on waterfall node -> Sensitivity analysis view which is more interactive
    Return to Fragment LCIA to see effect in all method panels.

Exploded Fragment View
    Graph of fragment where subfragments are replaced with subgraph. Nodes are colored by stage.
    Need to merge flows having same flowid.
======================================================================================================================
Thur Apr 2 2015
Fragment LCIA planned change summary

The Fragment LCIA view + controller will have 2 different modes. The mode depends on UI router state. Here is how I imagine each mode will look and behave�

1.	Top-level fragment LCIA mode is enabled when user selects Fragment
LCIA from top menu bar. 

View contains drop-down selection list of top-level fragments and multiple
selection list of scenarios. Fragment selection determines contents of
scenario selection list. Fragment LCIA is not performed until user clicks a
button labeled, �Get Fragment LCIA Results� (?).

2.	Fragment navigation mode is enabled when user clicks Fragment LCIA
from Fragment Sankey view.

In this mode, the view displays the current fragment navigation state as
breadcrumbs. Fragment LCIA is performed immediately on current fragment,
comparing current scenario to base case scenario. (If they are the same,
then only one waterfall is shown in each panel).

A sub-fragment selection list will allow the user to navigate to a
sub-fragment. The behavior will be like in the Fragment Sankey
view. Implementation of breadcrumbs may get tricky here. Will let you know
how it goes.


In either mode, user may close LCIA method panels.
======================================================================================================================
Thur Jan 19 2015
Met with Robert and Brandon

Fragment LCIA
	Should be able to remove scenarios (via multi-selection list) and methods (using close button)

Navigation Bar
	Scenario Detail View. Doubles as scenario edit view.

Fragment LCIA
	Axis label overlap problem

Fragment flows
	Add button to navigate to fragment flow param view
	Apply changes returns to fragment flows view

Help
	Define fragment, top-level fragment, activity level etc.

Process selection should be recalled

Process LCIA
	Display process data source, private setting

Process LCIA detail view
	Allow EF param to be updated, but not CF param

Excel upload of params would be desirable

Ability to download data desirable

Param grid
	All text should be selectable
	Desirable: button to copy value to param

Fragment Flow Param
	2 grids for different factor types: Emission and Dissipation
		
Fragment Sankey
	root node label: reference flow		
	
Conservation parameter desirable

Composition models very desirable
	


======================================================================================================================
Wed Jan 14 2015

Summary of UI discussions today and Monday.

==========
Parameters
==========

No need to display Param Type or Name.
List of all scenario parameters should display type and name of related resource(s).

Parameters can be added, deleted, and updated in views of related data.

Param Type          Related Data
----------          --------------
10                  LCIA Characterization Factors
1                   Fragment Flows (with Process Node parent)
10, 6, 8            Process LCIA details

UI for making parameter changes should be consistent across views.
Display table where each row has related entity name(s), base value, param value, and button to delete param.
Should be able to sort table by column.
Ideally, user would be able to create param and update value of param in the table row,
without navigation to another view.

-----
Issue
-----
Web API and UI would be simple if parameters could be added, updated, and deleted individually. However, that is
inefficient if backend rebuilds cache after every change. BK will explore alternatives.

===============
Fragment Sankey
===============

This view should have a scenario selector. Then, a route to the view could appear in top-level navigation bar.
Name it "Fragment Flows".

Remove background flows?

User should be able to navigate from a fragment process node to a table of child fragment flows that includes related
dependency params. User should be able to add, update, and delete dependency params in that view.

Since there is more than one navigation route from a process node, put links in the tool tip for
 * Process LCIA
 * Dependency Params

-----------------
New Fragment View
-----------------
Displays fragment structure in node-link graph.
Has fragment navigation capability.

Not sure this view is still needed since we decided to add a route to fragment flow dependency params from the
sankey view.

=============
Process LCIA
=============

Bar Chart Legend - remove Param column. Add Factor, Quantity columns.
Use bold font on every value that is derived from parameter.

Add Details button to each panel where LCIA result details are available.
Detailed Process LCIA view includes a row for every result detail (including very small and negative values).
Each row displays LCIA Factor, Process Flow Quantity values + related param values.
Activity level is not applied in this view.
Params can be added, updated and deleted. Impact of changes will be seen when user returns to Process LCIA view.

======================================================================================================================
Thur Dec 11 2014
by SB

Additions, Issues

==============
Navigation Bar
==============
The top of the page will display a navigation bar in all views.
Navigation bar links: Home page, Fragment LCIA, Process LCIA

------------------
Process LCIA View
------------------
If a user navigates here from the navigation bar, then this view will not have
scenario and fragment navigation context. In that state, the view
should allow the user to select a scenario and select a process with elementary flows.

==================
Issues / Questions
==================
1. Since parameters are updated, added, and deleted one at a time, there is no
need for a pending parameter change queue. Should the scenario detail view still
allow the user to view and change parameters? I don't see an easy way to get
parameterized entities from the web API in that view. They will be needed in order to
generate descriptor and original value. 
In other views, the related entities are already loaded. 


===============================================================================
Mon Dec 8 2014

Summary incorporating recent clarifications.

==============
Authentication
==============
User authentication will be done before app starts. The app will receive an
authorization token which it will add to every web API request.

========================
Initial View / Home Page
========================
Initial view will contain list of scenarios and list of LCIA methods.
User may select one active LCIA methods. Active scenario is selected via  
navigation.
Desired, but not required: bird's eye visualization of all results.
(For example, grid of small bar charts displaying Fragment LCIA cumulative 
 results).

-------------
Scenario List
-------------
Table of user's scenarios containing hyperlinks to other views
Scenario name 		-> Scenario Detail View
Top-Level Fragment name -> Fragment Sankey View

User may create new scenario here.

--------------------
Scenario Detail View
--------------------
Contains table of all parameters for the selected scenario. 

If the scenario is editable (scenariogroupid <> 1),
then existing parameters may be updated or deleted. 

 * Parameter table columns
   - Type
   - Descriptor: Name(s) of entity (or entities) related to the parameter.
   - Name (optional, created by user)
   - Original Value (unparameterized value)
   - Parameter Value

? How will front-end get original value for all types of parameters ?

 User clicks on Apply button to send parameter changes to back end via web API.
 Parameters are updated/deleted one at time. Back-end will clear related 
 cache records. The front-end will clear its own caches of LCIA results. 
 
 Note: Computation will be performed, and cache records generated as needed when 
  LCIA results are queried via web API.

---------------------
LCIA Method List View
---------------------
Table of LCIA methods with check box column that allows user to choose which 
methods will be shown in LCIA result views.
LCIA method name will be a hyperlink to LCIA detail view.

-----------------------
LCIA Method Detail View
-----------------------

 * Displays LCIA Method properties

 * Contains table of all LCIA Characterization Factors for the selected method.
   For every factor that has a parameter in the "active" scenario, 
   the parameter will be displayed on the same row.
   Since this view does not have a scenario parent view, it will allow the user 
   to select the active scenario.

 * If user is allowed to update scenario,
    user may create, update, delete LCIA Characterization Factor parameters here.
    New parameters may be created.

   Front-end clears its own LCIA result caches after scenario 
   parameter changes.

 * LCIA Factor table columns
   - Flow Name
   - Composition
   - Factor
   - Parameter name (optional)
   - Parameter value

**********************************************************************************
New Parameter Constraint: The thing that is parameterized in the scenario can only  one 
have one parameter of a particular type.
For example, if an LCIA Characterization Factor has a type 10 parameter in the 
active scenario, then the user will be prevented from creating another 
type 10 parameter for that factor.
**********************************************************************************

--------------------
Fragment Sankey View
--------------------
The table of inputs and outputs in the fragment sankey view should be 
parameterizable, generating type 1 params.  type 4 params would be accessed by 
looking at the flowproperties belonging to a given fragmentflow, but that is 
not a priority.

TBD:
Interface for editing Dependency parameters 
(relevant to fragment node input/output flows)
Interface for editing Flow Property parameters

------------------
Process LCIA View
------------------
User navigates here from a process node in the Fragment Sankey view. 
Therefore, this view has a scenario, fragment flow, and process context.
The activity level from fragment flow navigation is also applied.

If the active scenario can be updated by the user, then the user will be
allowed to change parameters relevant to Process LCIA (currently, ProcessEmission
and LCIAFactor). 

It is not feasible to display parameters in the current Process LCIA view. The 
legend below the bar only display flows with significant magnitiude, and there 
is no room in the current layout for new columns.

Therefore, SB proposes adding a Process LCIA Parameter View where related 
parameters can viewed, updated, added and deleted. Each active method in the
Process LCIA view would have a link to the Process LCIA Parameter View.  

---------------------------
Process LCIA Parameter View
---------------------------
This view has scenario, fragment flow, process, and LCIA method context.
It will display related ProcessEmission and LCIA Factor parameters. (In the future,
other parameter types will be supported).

If the user is allowed to update the scenario, then the user may edit the parameters 
(create/delete/update).

* Process LCIA Parameter table columns
   - Flow Name
   - Flow Category
   - Factor
   - Parameter name (optional)
   - Parameter value

After user Applies parameter changes, the front-end will clear its cache of Process LCIA 
results for the active scneario and current process (? all active methods ?). 
When the user returns to the Process LCIA view, new Process LCIA results will be loaded 
and displayed.

==============
Fri Dec 5 2014

Summary of discussions regarding the front-end app to date.

========================
Initial View / Home Page
========================

We assume user authentication will be handled by Ryan @ CalRecycle.
The app's initial view will appear after the user logs in.

[BK] The app will need to store some kind of authentication token it
receives from CalRecycle, and send it as a URL parameter for every request
that requires authentication (basically, for every request that begins with
/scenarios/x/... where the requested scenario is not in ScenarioGroup 0).

Brandon has requested that the initial view contain a list of  
scenarios and a list of LCIA methods. He is open to Sabina's suggestion that 
the initial view be a visualization that provides a bird's eye view of 
all LCIA results. This visualization would contain links that would allow 
the user to drill down to more detailed views.

------------------
Scenario List View
------------------
Table of user's scenarios containing hyperlinks to other views
Scenario name 		-> Scenario Parameter View
Top-Level Fragment name -> Fragment Sankey View

-----------------------
Scenario Parameter View
-----------------------
Contains table of all parameters for the selected scenario and displays 
user's pending changes to the parameters.

 * Parameter table columns
   - Type
   - Descriptor (auto-generated)
   - Name (optional, created by user)
   - Original value (current value before change?)
   - New value (pending value change?)

 User clicks on Apply button to send parameter changes to back end via web API.
 Parameter changes will impact results, so the front-end should clear its own
 cached results and get new results from the web API after the Apply action.

---------------------
LCIA Method List View
---------------------
Table of LCIA methods with check box column that allows user to choose which 
methods will be shown in LCIA result views.
LCIA method name will be a hyperlink to LCIA detail view.

-----------------------
LCIA Method Detail View
-----------------------
 * Displays LCIA Method properties

 * Contains table of all LCIA Characterization Factors for the selected method.
   For every factor that has a parameter, the parameter will be displayed on the 
   same row.
   Table columns:
   - Flow name
   - Composition
   - Name (optional, created by user)
   - Original value (current value before change?)
   - New value (pending value change?)
   
 * User may create and update LCIA Characterization Factor parameters here. 
   These changes should not be sent to the web API immediately. 
   They should appear in the Scenario Detail view as pending changes.

 * LCIA Factor table columns
   - Flow Name
   - Composition
   - Factor
   - Parameter name (optional)
   - Parameter value

------------------------
Process LCIA Detail View
------------------------
User navigates here from a process node in the Fragment Sankey view. 
Therefore, this view has a scenario, fragment flow, and process context.
The activity level from fragment flow navigation is also applied.

For every active LCIA method, if details are in process LCIA results,
this view contains a segmented bar chart of Process LCIA result details. 
Relevant parameters should be displayed near the result details.
The relevant parameter types are 4, 6, 8, and 10?

[BK] Type 4 params are not relevant to the Process LCIA view.  For now,
only type 8+10 are relevant.  (Type 5+6 would be relevant if the dissipation
code ever gets written.)


=========
Questions
=========

 1. How/where is parameter descriptor generated?

    [BK] the parameter descriptor is simply the concatenation of names of
    the IDs listed in the ParamResource-- e.g. Process and Flow for types 6
    and 8; LCIA Method + Flow for type 10; FragmentFlow for types 1+2.

    They should be generated on the fly from the front end in the Scenario
    Detail View only.  They are not needed elsewhere.

 2. Please specify web API actions to execute when parameter changes are applied.

    [BK] PUT or POST a list of ParamResources.  Alternatively, PUT or POST
    a ScenarioDetailResource containing a list of ParamResources.

    Note-- I can't think of a good reason to distinguish between PUT and
    POST methods.  Each param is uniquely determined by its reference
    IDs... so, if the param doesn't exist, create it; if it does exist;
    update it.  

    If you think it's important to treat POST and PUT differently, then the
    frontend will have to do two API calls- one to POST new params, and the
    other to PUT changes to existing params.

 3. Do we have a web API method for getting LCIA characterization factors?

    [BK] Not presently! I guess we need one.

 4. LCIA Method Detail view does not have scenario context.
    How will user assign LCIA Characterization Factor parameter to scenario?

    [BK] The Frontend should have in mind an "active" scenario.  It should
    also know whether the user is authorized to edit the active scenario.
    This can be determined from the Scenario.ScenarioGroup entry.  If the
    ScenarioGroup is 1, the scenario may not be edited.  If the
    ScenarioGroup is non-1, it can be edited.

 5. Need help describing the parameter table in the Process LCIA details view.

    OK-- noted.    
    Here's a try:
    Flow Name | Flow Category | EF | CF | Result

    EF = Emission Factor = ProcessFlow.Result 
       	 	  	   OR Param.Value for Type 8 Params

    CF = Characterization Factor = LCIA.Factor
       	 		  	   OR Param.Value for Type 10 Params

    Result = EF * CF

    User should be able to select any EF and parameterize it, creating a
    new type 8 param; or any CF and parameterize it, creating a new type 10
    param. 


==========
Mon Sep 15 23:08:04 PDT 2014

Application state: stored in client

User has access to a set of scenario groups, that are determined
based on authentication-

The server should tell the API who is making the request, and the DB should
just have a mapping of UserIDs to Scenario Groups-- each user gets its own,
plus more can be shared.  so only for sharing do we need a table. UserID
and ScenarioGroupID can be synonymous.

so: a user has access to a set of scenarios and can create new ones.  To
create a new scenario: select an existing scenario to duplicate, or start
from scratch.

components of a scenario:

 * a list of Params: Type, Name, type-specific mapping, value, metadata

   - dependency params: (type 1, 2, 3) apply to FragmentFlows
   - flow property params: (type 4) apply to FlowFlowProperty entries
   - [composition params: type 5; currently unsupported]
   - emission factor params: (type 8) apply to ProcessFlow entries
   - dissipation factor params: (type 6)" ", via composition model
   - characterization params: (type 10) apply to LCIA entries

 * a list of substitutions:

   - process / fragment substitutions
   - background substitutions
   - composition substitutions

All params and substitutions are applied during the computation routines
and cached by scenario.

Users interact with the database by:

 (1) navigating the model graphically using the sankey diagrams
 (2) inspecting resources via query views
 (3) designing scenarios by creating and adjusting params, either 
     - during interactive traversal or 
     - via menu-driven access


============
Initial View
============

Upon connecting to the service, the user should see a menu of options,
including:

 * Scenario Viewer (--> sankey view)
 * Process Inspector (--> process LCIA view)
 * [imtermediate] Flow Inspector (--> table views; composition models)
 * Background Resolution
 * LCIA Method Inspector

The Frontend should remember session information about the user, such as:

  - what scenarios are available
  - ScenarioID selection list
  - LCIAMethodID selection list
  - currently active scenario (edits apply to active scenario)
  - local list of params to be added / changed / removed from scenario 

  - any cached db information, e.g. flow list + process list

---------------
Scenario Viewer
---------------

list of scenarios available to the user:

 - name, group ID- visibility - can edit?
 - reference flow and activity level of top-level fragment
 - view in sankey viewer
 - view/edit as parameter list
 (- compute LCI)

 - waterfalls? or access those via sankey view

 - compare scenarios by LCIA score?


-----------------
Process Inspector
-----------------

 - all processes pulldown list
   * filters: processes with emissions / ?

 - tabular (or sankey?) list of intermediate flows
 - lcia pulldown list
 - segmented barchart showing unit LCIA score and breakdown

 -? if ProcessComposition, ... show composition profile?
   * table of CompositionData->FlowPropertyEmission->ProcessDissipation

 -? if scenario, show params:
   * type [5,]6- labeled in ProcessComposition table
   * type 8- labeled in segmented barchart view / list

   * type 10- labeled in segmented barchart view if applicable

 -? support param PUT + POST if user has permissions on scenario

--------------
Flow Inspector
--------------

 - select elementary / intermediate

 - if elementary.. that's a doozy of a list
   * maybe allow user to select by classification

 - if intermediate, a pulldown should suffice

 - shows:
   * flow metadata
   * classification
   * if elementary: show all LCIA factors
   * if intermediate: show all flowproperties

 - if flow appears in CompositionModel, show available composition models

 - if scenario: GET/PUT/POST type 4 (flowproperty) and type 10 (lcia)
   params; select alternate composition model

   - where does one input alternate composition models? here, presumably

---------------------
LCIA Method Inspector
---------------------

gah

