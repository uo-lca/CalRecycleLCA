==========
Tue Jul 29 11:31:27 -0700 2014

scores[...] = ProcessLCIA( process_id, scenario_id, lciamethod_ids[...])
{
  inventory = ComputeProcessLCI( process_id, scenario_id );
  for k=1:length(lciamethod_ids)
  {
    scores[k] = ComputeProcessLCIA(inventory, scenario_id, 
    	      		           lciamethod_ids[k] );
  }
}


LCIA = ComputeProcessLCIA( inventory, scenario_id, lcia_method_id )
{
  // returns LCIA: a list of scores: FlowID, DirectionID, Quantity, Factor,
  // Result- as specified in the API (flowname can be done separately)
  // result is an LCIA score from that flow

  // input is inventory: a list of flows
  // FlowID, DirectionID, Result
  LCIA = SELECT inventory.FlowID AS FlowID, 
       	 	inventory.DirectionID AS DirectionID,
		inventory.Result AS Quantity,
		(lcparam.Value == NULL 
		  	? LCIA.Factor : lcparam.Value) AS Factor,
		Quantity * Factor AS Result
		FROM inventory INNER JOIN LCIA 
		ON inventory.FlowID = LCIA.FlowID
		LEFT OUTER JOIN
		(
		  SELECT chp.LCIAID, chp.Value
		  FROM CharacterizationParam chp
		  INNER JOIN Param p ON chp.ParamID = p.ParamID
	          WHERE p.ScenarioID = scenario_id
		) 
		lcparam
		ON LCIA.LCIAID = lcparam.LCIAID
		WHERE LCIAMethodID = lcia_method_id
		  AND inventory.DirectionID = LCIA.DirectionID
		  AND LCIA.Geography IS NULL
}


inventory = ComputeProcessLCI ( process_id, scenario_id )
{
  // returns a list of flows: FlowID, DirectionID, Result
  // Param types: ProcessEmissionParam
  // FlowPropertyParam + ProcessDissipationParam
  inventory = SELECT pf.FlowID, pf.DirectionID, 
  	      (pep.Value == NULL ? pf.Result : pep.Value) AS Result
  	      FROM ProcessFlow pf
	      LEFT OUTER JOIN 
	      (
	        SELECT pep.ProcessFlowID, pep.Value
		FROM ProcessEmissionParam pep 
		INNER JOIN Param p ON pep.ParamID = p.ParamID
	        WHERE p.ScenarioID = scenario_id
	      )
	      pep
	      ON pf.ProcessFlowID = pep.ProcessFlowID
	      WHERE pf.ProcessID = process_id

  if ~isempty( SELECT ProcessCompositionID FROM ProcessComposition
     	       WHERE ProcessID = process_id )
  {
    // dissipation is a list of emissions derived from the pairing of a
    // composition model with an emission factor.  Flows resulting from
    // dissipation modeling replace (override) direct inventory flows.
    dissipation = ComputeDissipation( process_id, scenario_id );
    inventory = SELECT inventory.FlowID AS FlowID,
    	      	       inventory.DirectionID AS DirectionID,
		       ( dissipation.Result == NULL 
		           ? inventory.Result : dissipation.Result) AS Result
		FROM inventory LEFT OUTER JOIN dissipation 
		ON inventory.FlowID = dissipation.FlowID
  }

  return inventory;

}


dissipation = ComputeDissipation ( process_id, scenario_id )
{
  // three steps here:
  // 1. determine the flow composition model on a scenario-specific basis
  // 2. apply EmissionFactors (with params) to the composition

  // objective is to identify the correct CompositionModel to use.
  // the following two pseudocode blocks are equivalent:
  { // option 1:
  ProcessComp = SELECT * FROM ProcessComposition 
  	      	WHERE ProcessID = process_id;
  CompModel = ProcessComp.CompositionModelID;

  SubsComp = SELECT * FROM CompositionSubstitution 
  	     WHERE ProcessCompositionID = ProcessComp.ProcessCompositionID
	       AND ScenarioID = scenario_id;

  if ~isempty( SubsComp)
    CompModel = SubsComp.CompositionModelID;

  }{ // option 2
  CompModel = SELECT ( cs.CompositionModelID == NULL 
			? pc.CompositionModelID
			: cs.CompositionModelID) AS CompositionModelID
	      FROM ProcessComposition pc
	      LEFT OUTER JOIN CompositionSubstitution cs
	      ON pc.ProcessCompositionID = cs.ProcessCompositionID
	      WHERE pc.ProcessID = process_id
	        AND cs.ScenarioID = scenario_id;
  } 

  // Emission Factor list with fields: FlowID, EmissionFactor
  efs = SELECT pf.FlowID AS FlowID,
      	( pdparam.Value == NULL ? pd.EmissionFactor : pdparam.Value)
	AS EmissionFactor
      	FROM ProcessDissipation pd
	LEFT OUTER JOIN
	(
	  SELECT pdp.ProcessDissipationID, pdp.Value
	  FROM ProcessDissipationParam pdp
	  INNER JOIN Param p on pdp.ParamID = p.ParamID
	  WHERE p.ScenarioID = scenario_id 
	) pdparam
	ON pd.ProcessDissipationID = pdparam.ProcessDissipationID
	INNER JOIN ProcessFlow pf
	ON pd.ProcessFlowID = pf.ProcessFlowID
	WHERE pf.ProcessID = process_id
	  AND pf.DirectionID = 2 ; // output
	
  // now link emission factors to composition measurements by way of
  // FlowPropertyEmission.
  // fields: FlowID, DirectionID (all Output), Result
  // for now, do not parameterize composition data
  // otherwise, there is one more left outer join below
  dissipation = SELECT efs.FlowID AS FlowID,
  	      	efs.DirectionID AS DirectionID,
		(efs.EmissionFactor * fpe.Scale * cd.Value) AS Result
  	      	FROM CompositionData cd
		INNER JOIN FlowPropertyEmission fpe
		ON cd.FlowProperty = fpe.FlowProperty
		INNER JOIN efs
		ON efs.FlowID = fpe.FlowID
		WHERE cd.CompositionModel = CompModel;

  // and that's the end
}



==========
Tue Jun 24 11:48:59 -0700 2014

Note: Code after this point is deprecated


ScenarioInit( scenario_id )
{
  // run this code any time a scenario is modified
  // "Scenario is modified" means: 

  ClearNodeCache( scenario_id ); // deletes all records matching
  		  	       // scenario_id 

  ClearScoreCache( scenario_id ); // deletes all records matching
  		       		// scenario_id 

  ClearBackgroundCache( scenario_id ); // deletes all records matching
  		       		     // scenario_id 

}
  

ComputeFragment( fragment_id, scenario_id, list_of_lcia_methods L )
{
  // top-level function to populate fragment cache data
  ComputeBackground( scenario_id, L ); // make sure background is computed
  		     		      // for all requested LCIA methods

  // F is fragment object
  F = new Fragment( fragment_id ); 

  // next, traverse the fragment -- populates NodeCache
  Traverse( fragment_id, scenario_id );

  // now, do LCIA computation
  F.ComputeNodeScores( scenario_id, L );
}

  
ComputeNodeScores( fragment_id, scenario_id, list_of_lcia_methods L )
{
  // this is actually really easy.
  B = applyScenarioBackground( scenario_id );
  
  flows = SELECT ff.FragmentFlowID, 
  	  	 ff.FragmentStageID, 
		 nc.NodeCacheID,
		 nc.NodeWeight
	  FROM FragmentFlow ff
  	  INNER JOIN NodeCache nc 
	  ON ff.FragmentFlowID = nc.FragmentFlowID
	  WHERE ff.FragmentID = fragment_id
	    AND ff.NodeType ~= 3 

  for i in flows
  {
    missing_L = SELECT DISTINCT LCIAMethodID 
    	      	FROM L LEFT OUTER JOIN ScoreCache sc
		  ON L = sc.LCIAMethodID
		WHERE sc.NodeCacheID = i.NodeCacheID
		  AND sc.ImpactScore IS NULL

    switch i.NodeType
    { // InputOutput excluded
      case Background
      {
        for j in missing_L
	{
	  // match flow and direction => Background.Direction is given
          // w.r.t. the foreground (i.e. electricity is an Input)
	  bid = SELECT BackgroundID FROM B 
	        WHERE B.FlowID = i.FlowID
		  AND B.DirectionID = i.DirectionID

	  MyScore = SELECT Score FROM BackgroundCache
	  	    WHERE BackgroundID = bid
		      AND ScenarioID = scenario_id
		      AND LCIAMethodID = j

	  SetScoreCache( i.NodeCacheID, j, MyScore );
	} // just replicate BackgroundCache score into ScoreCache
      }
      case Process
      {
        the_node = i INNER JOIN FragmentNodeProcess ON FragmentFlowID;
      	inventory = ComputeProcessLCI (	the_node.ProcessID, FragmentFlowID,
		    		      	scenario_id );

        for j in missing_L
	{
	  LCIA = ComputeProcessLCIA ( inventory, scenario_id, j );
	  MyScore = sum( LCIA.Score );
	  SetScoreCache( i.NodeCacheID, j, MyScore );
	}
      }
      case Fragment
      {
        the_node = i INNER JOIN FragmentNodeFragment ON FragmentFlowID
	
	for j in missing_L
	{
	  FragmentScore = ComputeFragmentLCIA ( the_node.FragmentID, 
	  		  		      	scenario_id, j);
	  MyScore = sum ( FragmentScore.LCIA );
	  SetScoreCache( i.NodeCacheID, j, MyScore );
	}
      }
    }
  } // see?? easy!
}


FragmentScore = ComputeFragmentLCIA ( fragment_id, scenario_id, lcia_method_id )
{
  FragmentScore = SELECT nc.NodeCacheID AS NodeCacheID,
  	      	     nc.NodeWeight AS NodeWeight,
		     sc.ImpactScore AS ImpactScore,
		     NodeWeight * ImpactScore AS LCIA,
		FROM FragmentFlow INNER JOIN NodeCache nc ON FragmentFlowID
		INNER JOIN ScoreCache sc ON NodeCacheID
		WHERE FragmentFlow.FragmentID = fragment_id
		  AND ScenarioID = scenario_id
		  AND sc.LCIAMethodID = lcia_method_id;

  // later-- add in grouping by stage
}


