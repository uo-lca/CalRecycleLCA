<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExtensionMethods</name>
    </assembly>
    <members>
        <member name="M:ExtensionMethods.BooleanExtensions.ToYesOrNo(System.Boolean)">
            <summary>
            Returns Yes or No string if a boolean value is true or false, respectively.
            </summary>
            <param name="b">value to test</param>
            <returns>Yes or No string.</returns>
        </member>
        <member name="M:ExtensionMethods.ByteExtensions.ToHexString(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Converts a collection of bytes into hexadecimal string respresentation.
            </summary>
            <param name="bytes">Bytes to be converted</param>
            <returns>Hexadecimal representation</returns>
        </member>
        <member name="M:ExtensionMethods.IPrincipalExtension.GetUserNameOnly(System.Security.Principal.IPrincipal)">
            <summary>
            Returns the user name without a domain name.
            </summary>
            <param name="user">IPrincipal</param>
            <returns>user name.</returns>
        </member>
        <member name="M:ExtensionMethods.IPrincipalExtension.IsInAnyRole(System.Security.Principal.IPrincipal,System.String[])">
            <summary>
            Determines if a IPrincipal belongs to at least one of the specified roles.
            </summary>
            <param name="user">IPrincipal.</param>
            <param name="roles">An array of roles.</param>
            <returns>true if the IPrincipal is at least in one of the specified roles; otherwise, false.</returns>
        </member>
        <member name="M:ExtensionMethods.IPrincipalExtension.IsInAllRoles(System.Security.Principal.IPrincipal,System.String[])">
            <summary>
            Determines if a IPrincipal belongs to all the specified roles.
            </summary>
            <param name="user">IPrincipal.</param>
            <param name="roles">An array of roles.</param>
            <returns>true if the IPrincipal is in all the specified roles; otherwise, false.</returns>
        </member>
        <member name="M:ExtensionMethods.NullableExtensions.ToFormat``1(System.Nullable{``0},System.String)">
            <summary>
            Returns a formatted string for a nullable type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">a nullable struct</param>
            <param name="format">string format.</param>
            <returns>Null if value is null; otherwise, returns a formatted string. </returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToFormat(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.
            </summary>        
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>s if args is null or empty, or a copy of format in which the format items have been replaced by the string representation of the corresponding objects in args.</returns>        
            <exception cref="T:System.ArgumentNullException">format or args is null.</exception>
            <exception cref="T:System.FormatException">format is not valid.</exception>  
        </member>
        <member name="M:ExtensionMethods.StringExtensions.Capitalize(System.String)">
            <summary>
            Capitalizes the first letter of each word.
            </summary>
            <param name="value">A string to capitalize.</param>
            <returns>A capitalized string</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Capitalizes the first letter of each word.
            </summary>
            <param name="value">A string to capitalize.</param>
            <returns>A capitalized string.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.IsLike(System.String,System.String)">
            <summary>
            Determines whether this string and a specified System.String object have the same value ignoring Case. 
            </summary>
            <param name="s">Original string</param>
            <param name="value">The string to compare to this instance.</param>
            <returns>true if the value of the value parameter is the same as this string ignoring case; otherwise, false.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.IsLikeAny(System.String,System.String[])">
            <summary>
            Determines whether this string has the same value as any other string in the values array ignoring Case. 
            </summary>
            <param name="s">Original string.</param>
            <param name="values">A string array that contains zero or more strings to compare ignoring case.</param>
            <returns>true if the original string value is the same as any string in the compareTo array ignoring case.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.IsLikeAll(System.String,System.String[])">
            <summary>
            Determines whether this string has the same value as all the other strings in the values array ignoring Case. 
            </summary>
            <param name="s">Original string.</param>
            <param name="values">A string array that contains zero or more strings to compare ignoring case.</param>
            <returns>true if the original string value is the same as all the strings in the values array ignoring case.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Reads the first count characters from the left of a string.
            </summary>
            <param name="s">Original string.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The left count characters of the original string.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToFormatNamed(System.String,System.Object[])">
            <summary>
            Replaces the named format item in a specified string with the string representation of a corresponding object in a specified array.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args.</returns>  
            <exception cref="T:System.ArgumentNullException">format or args is null.</exception>
            <exception cref="T:System.FormatException">format is not valid.</exception>        
        </member>
        <member name="M:ExtensionMethods.StringExtensions.TrimEnd(System.String,System.String,System.Boolean)">
            <summary>
            Removes a trimString from the end of a string, optionally ignoring case.
            </summary>
            <param name="s">Original string to trim.</param>
            <param name="trimString">string to remove.</param>
            <param name="caseSensitive">true if comparison should be case sensitive </param>
            <returns></returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToLink(System.String,System.String)">
            <summary>
            Scans a string for valid http Urls and converts them to Html links.
            </summary>
            <param name="text">String to scan</param>
            <param name="value">Anchor value. If null, the link wil be used.</param>
            <returns></returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.TrimStart(System.String,System.String,System.Boolean)">
            <summary>
            Removes trimString string from the beginning of a string.
            </summary>
            <param name="s">Original string.</param>
            <param name="trimString">A string to be trimmed</param>
            <param name="caseSensitive">true if comparsion should be case sensitive.</param>
            <returns></returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns>true if the value parameter is null or System.String.Empty, or if value consists exclusively of white-space characters.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.StartsLike(System.String,System.String)">
            <summary>
            Determines whether the beginning of this string instance matches the specified string ignoring case.
            </summary>
            <param name="s">String to test.</param>
            <param name="value"> The string to compare.</param>
            <returns> true if the value parameter matches the beginning of this string ignoring case; otherwise, false.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.EndsLike(System.String,System.String)">
            <summary>
            Determines whether the end of this string instance matches the specified string ignoring case.
            </summary>
            <param name="s">String to test.</param>
            <param name="value"> The string to compare.</param>
            <returns> true if the value parameter matches the beginning of this string ignoring case; otherwise, false.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Reads the last characters beginning from the right of a string.
            </summary>
            <param name="value">Original string.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The right most n characters of the original string.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses a string.
            </summary>
            <param name="value">A string to reverse.</param>
            <returns></returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.IsNumeric(System.String)">
            <summary>
            Determines if a string can be parsed into a number.
            </summary>
            <param name="value">String to test</param>
            <returns>true if the string can be parsed to as number; otherwise, false.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToMd5(System.String,System.Text.Encoding)">
            <summary>
            Computes MD5 hash of a string.
            </summary>
            <param name="value">String to hash.</param>
            <param name="encoding">An encoding for conversion. If null, UTF8 will be used .</param>
            <returns>MD5 hash in hexadecimal format.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToInt(System.String)">
            <summary>
            Parses an integer from a string.  
            </summary>
            <param name="s">String to parse into an integer.</param>
            <returns>An integer.</returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">s represents a number less than System.Int32.MinValue or greater than System.Int32.MaxValue.</exception>        
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToIntOrDefault(System.String,System.Int32)">
            <summary>
            Parses an integer from a string if possible, or returns a default integer.
            </summary>
            <param name="value">String to parse into an integer.</param>
            <param name="defaultValue">An value to return if parsing fails. </param>
            <returns>An integer.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToDouble(System.String)">
            <summary>
            Parses a double from a string. Throws an exception if parsing fails.
            </summary>
            <param name="value">String to parse into a double.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToDoubleOrDefault(System.String,System.Double)">
            <summary>
            Parses a double from a string if possible, or returns a default value.
            </summary>
            <param name="value">String to parse into a double.</param>
            <param name="defaultValue">A value to return if parsing fails. </param>
            <returns>A double.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts a string into Base64 encoding.
            </summary>
            <param name="value">A string</param>
            <param name="encoding">An encoding for conversion. If null, UTF8 will be used .</param>
            <returns>Base64 encoded string</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            Decodes a Base64-encoded string.
            </summary>
            <param name="value">A Base64-encoded string</param>
            <param name="encoding">An encoding for conversion. If null, UTF8 will be used .</param>
            <returns>Plain string</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts a string into an array of bytes.
            </summary>
            <param name="value">A string to convert.</param>
            <param name="encoding">An encoding for conversion. If null, UTF8 will be used .</param>
            <returns>A byte array or null.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ContainsAny(System.String,System.String[])">
            <summary>
            Determines whether this string contains at least one of the specified strings. 
            </summary>
            <param name="s">Original string.</param>
            <param name="values">A string array that contains zero or more strings to compare .</param>
            <returns>true if the original string value contains one or more of the substrings.</returns>
        </member>
        <member name="M:ExtensionMethods.StringExtensions.ContainsAll(System.String,System.String[])">
            <summary>
            Determines whether this string contains all the specified strings. 
            </summary>
            <param name="s">Original string.</param>
            <param name="values">A string array that contains zero or more strings to compare .</param>
            <returns>true if the original string value contains all the specified substrings.</returns>
        </member>
    </members>
</doc>
